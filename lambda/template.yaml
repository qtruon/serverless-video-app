AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template deploys 5 lambda functions and 2 buckets for video upload, transcoded

Globals:
  Function:
    Timeout: 30
Resources:
  DependenciesLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: DependenciesLayer
            Description: dependency layer
            ContentUri: dependencies/dependencies.zip
            CompatibleRuntimes: 
              - python3.8

  UserAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: user-authorizer
      CodeUri: ./custom_authorizer/
      Handler: custom_authorizer.handler
      Runtime: python3.8
      Layers: 
        - !Ref DependenciesLayer
      MemorySize: 512
      Environment:
        Variables:
          AUTH0_DOMAIN: 'qtruong-dev.auth0.com'   # Move all variables into Params Store

  VideoApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: video-app-api
      StageName: dev
      Cors: "'*'"
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: swagger.yaml
      EndpointConfiguration: REGIONAL
      Auth:
        Authorizers:
          CustomAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt UserAuthorizer.Arn
            Identity:
              Header: Authorization
              ValidationExpression: ^[Bb]earer [-0-9a-zA-z\.]*$
              ReauthorizeEvery: 0
        DefaultAuthorizer: CustomAuthorizer

  CreatePostURL:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-presigned-url
      CodeUri: ./create_presigned_url/
      Handler: create_presigned_url.handler
      Runtime: python3.8
      Layers: 
        - !Ref DependenciesLayer      
      MemorySize: 512
      Role: !ImportValue S3ReadWriteLambdaRole-Arn
      Environment:
        Variables:
          UPLOAD_BUCKET_NAME: 'qtruon-source-video'
      Events:
        CreatePostURLAPI:
          Type: Api
          Properties:
            RestApiId: !Ref VideoApiGateway
            Path: /create-presigned-url
            Method: GET

  GetUserInfo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-user-info
      CodeUri: ./user_info/
      Handler: user_info.handler
      Runtime: python3.8
      Layers: 
        - !Ref DependenciesLayer
      MemorySize: 512
      Environment:
        Variables:
          AUTH0_DOMAIN: 'qtruong-dev.auth0.com'
      Events:
        GetUserInfoAPI:
          Type: Api
          Properties:
            RestApiId: !Ref VideoApiGateway
            Path: /get-user-info
            Method: GET

  TranscodeVideo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: video-transcode
      CodeUri: ./video_transcode/
      Handler: video_transcode.handler
      Runtime: python3.8
      Layers: 
        - !Ref DependenciesLayer
      MemorySize: 512
      Role: !ImportValue TranscodeJobLambdaRole-Arn
      Environment:
        Variables:
          DATABASE_URL: 'https://qtruong-dev.firebaseio.com/'
          ELASTIC_TRANSCODER_PIPELINE_ID: '1583199044752-5d4m67'  # Elastic Transcoder is not yet supported by CloudFormation
          ELASTIC_TRANSCODER_REGION: !Ref AWS::Region
      Events:
        UploadVideoEvent:
          Type: S3
          Properties:
            Bucket: !Ref SourceBucket
            Events: s3:ObjectCreated:*

  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'qtruon-source-video'
      CorsConfiguration:
          CorsRules:
          -
            AllowedHeaders: 
              - '*'
            AllowedMethods: 
              - POST
              - GET
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  TranscodedUpdate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: update-transcode
      CodeUri: ./update_transcode/
      Handler: update_transcode.handler
      Runtime: python3.8
      Layers: 
        - !Ref DependenciesLayer
      MemorySize: 512
      Environment:
        Variables:
          DATABASE_URL: 'https://qtruong-dev.firebaseio.com/'
          S3_TRANSCODED_BUCKET_URL: 'https://s3.amazonaws.com/qtruon-video-transcoded'
      Events:
        VideoUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref TargetBucket
            Events: s3:ObjectCreated:*

  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'qtruon-target-video'


Outputs:
  VideoApiGateway:
    Description: API Gateway endpoint URL of dev stage 
    Value: !Sub 'https://${VideoApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/'
  VideoApiGatewayRestApiId:
    Description: API Gateway ARN for AWS API Gateway
    Value: !Ref VideoApiGateway
    Export:
      Name: VideoApiGateway-RestApiId
